---
{{ if .Values.controller.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: controller
  name: controller
spec:
  replicas: {{ .Values.controller.replicaCount }}
  selector:
    matchLabels:
      app: controller
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels: 
        app: controller
      name: controller
    spec:
      containers:
        - name: controller
          image: {{ .Values.controller.image }}:v{{ .Values.controller.version }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          livenessProbe:
            httpGet:
              path: /livez
              port: 80
          readinessProbe:
            httpGet:
              path: /readyz
              port: 80
          {{- if .Values.controller.env }}
          env:
          {{- range (splitList "\n" .Values.controller.env) }}
            {{ . }}
          {{- end }}
          {{- end }}
          {{- if .Values.controller.volumeMounts }}
          volumeMounts:
          {{- range (splitList "\n" .Values.controller.volumeMounts) }}
            {{ . }}
          {{- end }}
          {{- end }}
      restartPolicy: Always
      {{- if .Values.controller.volumes }}
      volumes:
      {{- range (splitList "\n" .Values.controller.volumes) }}
        {{ . }}
      {{- end }}
      {{- end }}
{{ end }}
---
{{ if .Values.registry.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: registry
  name: registry
spec:
  replicas: {{ .Values.registry.replicaCount }}
  selector:
    matchLabels:
      app: registry
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: registry
      name: registry
    spec:
      containers:
        - name: registry
          image: {{ .Values.registry.image }}:v{{ .Values.registry.version }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8089
          livenessProbe:
            httpGet:
              path: /livez
              port: 8089
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8089
          {{- if .Values.registry.env }}
          env:
          {{- range (splitList "\n" .Values.registry.env) }}
            {{ . }}
          {{- end }}
          {{- end }}
          volumeMounts:
            - mountPath: /mnt/vol
              name: registry-data
          {{- if .Values.registry.volumeMounts }}
          {{- range (splitList "\n" .Values.registry.volumeMounts) }}
            {{ . }}
          {{- end }}
          {{- end }}
      restartPolicy: Always
      volumes:
        - name: registry-data
          persistentVolumeClaim:
            claimName: {{ required ".registry.volumeClaimName value is required!" .Values.registry.volumeClaimName }}
      {{- if .Values.registry.volumes }}
      {{- range (splitList "\n" .Values.registry.volumes) }}
        {{ . }}
      {{- end }}
      {{- end }}
{{ end }}
---
{{ if .Values.etcd.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: etcd
  name: etcd
spec:
  replicas: 1
  selector:
    matchLabels:
      app: etcd
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: etcd
      name: etcd
    spec:
      containers:
        - name: etcd
          image: {{ .Values.etcd.image }}:v{{ .Values.etcd.version }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 2379
        {{- if .Values.etcd.env }}
          env:
          {{- range (splitList "\n" .Values.etcd.env) }}
            {{ . }}
          {{- end }}
        {{- end }}
          volumeMounts:
            - mountPath: /etcd-data
              name: etcd-data
          {{- if .Values.etcd.volumeMounts }}
          {{- range (splitList "\n" .Values.etcd.volumeMounts) }}
            {{ . }}
          {{- end }}
          {{- end }}
      {{- if .Values.etcd.nodeAffinityKey }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: {{ .Values.etcd.nodeAffinityKey }}
                  operator: In
                  values:
                    - {{ required ".etcd.nodeAffinityValue value is required!" .Values.etcd.nodeAffinityValue }}
      {{- end }}
      restartPolicy: Always
      volumes:
        - name: etcd-data
          persistentVolumeClaim:
            claimName: {{ required ".etcd.volumeClaimName value is required!" .Values.etcd.volumeClaimName }}
      {{- if .Values.etcd.volumes }}
      {{- range (splitList "\n" .Values.etcd.volumes) }}
        {{ . }}
      {{- end }}
      {{- end }}
{{ end }}